=============================   
Q1: Multiple Choice
=============================
(i)     True
(ii)    True
(iii)   False
(iv)    True
(v)     True
(vi)    True
(vii)   False
(viii)  False
(ix)    True
(x)     False
(xi)    False

=============================
Q2: Reading code
=============================

(i) arr.length
(ii) O(1)
(iii) list with elements 1 evenly diving element 0
(iv) O(n^2)


=============================
Q3: Programming
=============================

Reverse a Linked List:

public void reverse() {
    Node prev = head;  
    Node cur  = head.next;  //first elem
    Node next = null; 

    while (cur != null) {
        next = cur.next;  
        cur.next = prev;  
        prev = cur; 
        cur = next;
    }

    head.next = prev;
}

At each itr:
1) save next node
2) adjust cur.next to point to prev
3) move every var along

At the end: 
1) readjust head

- 10 points: 
The method correctly reverses the linked list in place, modifying the next pointers as expected, without creating new data structures.

- 6 points: The method mostly works but has minor issues, such as edge cases (e.g., single node list or empty list) not handled properly.

- 4 points: has some semblence of cur, next, and prev and does adjustments

- 2 points: uses node and next and prev (minimum understanding)

- 0 points: The method is largely incorrect or incomplete, or it does not manipulate the list at all.

Runtime and space complexity: 2 points

=============================

B: rotateRight

    public void rotateRight(int[] arr, int d) {
        int n = arr.length;
        if (n == 0 || d == 0) {
            return arr;
        }

        d = d % n;

        for (int i = 0; i < d; i++) {
            rotateByOne(arr);
        }
    }

    private void rotateByOne(int[] arr) {
        int n = arr.length;
        int last = arr[n - 1];

        for (int i = n - 1; i > 0; i--) {
            arr[i] = arr[i - 1];
        }

        arr[0] = last;
    }


- 10 points:
- 6-8 points: does SOME shift
- 3-5 points: shows basic array logic and an attempt to shift


=============================
C: Event Management

15 total points
- correct class structure 5 points
- correct use of super 3 points

7 points:
- isRegOpen() bool returning if cur number < number of atendees
 - instanceof
 -

=============================
D: sort a stack

public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            // Pop the top element from the input stack
            int current = stack.pop();

            // While the tempStack is not empty 
            // and the top of tempStack is greater than the current element,
            // pop from tempStack and push it back to the input stack

            while (!tempStack.isEmpty() && tempStack.peek() > current) {
                stack.push(tempStack.pop());
            }

            // Push the current element to the tempStack
            tempStack.push(current);
        }

        // Transfer the elements back to the original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

10 points: full
6-8 points: two stacks (one stays sorted)
2-4 points: demonstrates some understanding of correct stack functions
